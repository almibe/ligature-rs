// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

import { test, runTests, assertEq } from "../util/test"
import Gaze from "./gaze"
import Array from "array"
import List from "list"
import Nibblers from "./nibblers"

runTests("Gaze Suite", [
    test("empty String input", () => {
        let gaze = Gaze.fromString("")
        assert(Gaze.isComplete(gaze))
        assert(Gaze.peek(gaze) == None)
        assert(Gaze.peek(gaze) == None)
        assert(Gaze.isComplete(gaze))
    }),
    test("empty array input", () => {
        let gaze = Gaze.fromArray(Array.make(0, "a"))
        assert(Gaze.isComplete(gaze))
        assert(Gaze.peek(gaze) == None)
        assert(Gaze.peek(gaze) == None)
        assert(Gaze.isComplete(gaze))
    }),
    test("init Gaze with one value", () => {
        let gaze = Gaze.fromArray(Array.make(1, "a"))
        assert(!Gaze.isComplete(gaze))
        assert(Gaze.peek(gaze) == Some("a"))
        assert(Gaze.peek(gaze) == Some("a"))
        assert(Gaze.next(gaze) == Some("a"))
        assert(Gaze.next(gaze) == None)
        assert(Gaze.isComplete(gaze))
    }),
    test("init Gaze with single char String", () => {
        let gaze = Gaze.fromString("a")
        assert(!Gaze.isComplete(gaze))
        assert(Gaze.peek(gaze) == Some('a'))
        assert(Gaze.peek(gaze) == Some('a'))
        assert(Gaze.next(gaze) == Some('a'))
        assert(Gaze.next(gaze) == None)
        assert(Gaze.isComplete(gaze))
    })
])

runTests("Take Suite", [
    test("take with single value", () => {
        let gaze = Gaze.fromString("a")
        assert(Gaze.attempt(Nibblers.take('a'), gaze) == Some(['a']))
        assert(Gaze.isComplete(gaze))
    })
])

runTests("Take Cond Suite", [
    test("takeCond with a single value", () => {
        let gaze = Gaze.fromString("a")
        assertEq(Gaze.attempt(Nibblers.takeCond((c) => c == 'a'), gaze), Some(['a']))
        assert(Gaze.isComplete(gaze))
    }),
    test("takeCond with multiple values", () => {
        let gaze = Gaze.fromString("cab")
        assertEq(Gaze.attempt(Nibblers.takeCond((c) => List.contains(c, ['a', 'b', 'c', 'd'])), gaze), Some(['c', 'a', 'b']))
        assert(Gaze.isComplete(gaze))
    }),
    test("takeCond match beginning", () => {
        let gaze = Gaze.fromString("abc123")
        assertEq(Gaze.attempt(Nibblers.takeCond((c) => List.contains(c, ['a', 'b', 'c', 'd'])), gaze), Some(['a', 'b', 'c']))
        assert(!Gaze.isComplete(gaze))
    }),
    test("takeCond no match beginning", () => {
        let gaze = Gaze.fromString("123abc")
        assertEq(Gaze.attempt(Nibblers.takeCond((c) => List.contains(c, ['a', 'b', 'c', 'd'])), gaze), None)
        assert(!Gaze.isComplete(gaze))
    })
])

runTests("Take CondI Suite", [
    test("takeCondI simple", () => {
        let gaze = Gaze.fromString("abc")
        assertEq(Gaze.attempt(Nibblers.takeCondI((c, i) => { (c == 'a' && i == 0) || (c == 'b' && i == 1) }), gaze), Some(['a', 'b']))
        assert(Gaze.isComplete(gaze))
    }),
])
