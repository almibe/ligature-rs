// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

import Gaze from "./gaze"
import List from "list"

export let take = (t) => (gaze) => {
    if (Gaze.next(gaze) == Some(t)) {
        Some([t])
    } else {
        None
    }
}

export let takeCond = predicate => (gaze) => {
    let mut cont = true
    let mut results = []
    while (cont) {
        let next = Gaze.next(gaze)
        match (next) {
            Some(value) when predicate(value) => {
                results = List.append(results, [value])
                cont = true
            },
            _ => cont = false
        }
    }
    if (List.length(results) == 0) {
        None
    } else {
        Some(results)
    }
}

export let takeCondI = predicate => (gaze) => {
    let mut index = 0
    let mut cont = true
    let mut results = []
    while (cont) {
        let next = Gaze.next(gaze)
        match (next) {
            Some(value) when predicate(value, index) => {
                results = List.append(results, [value])
                cont = true
                index += 1
            },
            _ => cont = false
        }
    }
    if (List.length(results) == 0) {
        None
    } else {
        Some(results)
    }
}
