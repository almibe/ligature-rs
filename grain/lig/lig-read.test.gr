// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

import { isOk, isErr, unwrap } from "result"
import { runTests, test, assertEq } from "../util/test"
import List from "list"
import { readLig, readIdentifier, readValue } from "./lig-read"
import { identifier, Integer, String, Value, Statement, Identifier } from "../ligature/ligature"
import Gaze from "../gaze/gaze"

let statement = (entity: String, attribute: String, value: Value) => {
    let entity = unwrap(identifier(entity))
    let attribute = unwrap(identifier(attribute))
    let statement: Statement = { entity, attribute, value }
    statement
}

runTests("Read Lig", [
    test("read Identifiers", () => {
        assertEq(readIdentifier(Gaze.fromString("<a>")), Ok(unwrap(identifier("a"))))
    }),
    test("read Values", () => {
        assertEq(readValue(Gaze.fromString("<a>")), Ok(Identifier(unwrap(identifier("a")))))
        assertEq(readValue(Gaze.fromString("4321")), Ok(Integer(4321L)))
        assertEq(readValue(Gaze.fromString("\"hello\"")), Ok(String("hello")))
        //assertEq(readValue(Gaze.fromString("0xDEAD")), Ok(unwrap(identifier("a"))))
    }),
    test("read single Statement", () => {
        assertEq(readLig("<a> <b> <c>"),
            Ok([statement("a", "b", Identifier(unwrap(identifier("c"))))]))
    }),
])
